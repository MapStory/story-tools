@charset "UTF-8";

// Specifies the number of columns an element should span. If the selector is nested the number of columns
// of its parent element should be passed as an argument as well.
//
// @columns
//   The unitless number of columns the element spans (required).
//   `@columns` also accepts decimals for when it's necessary to break out of the standard grid.
//   E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.
//
// @container-columns
//   The number of columns the parent element spans. If is not passed, it is equal to `@neat-grid-columns`,
//   the total number of columns in the grid.
//
// @display
//   Sets the display property of the element. By default it sets the display property of the element to `block`.
//   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.
//   If passed `table`, it sets the display property to `table-cell` and calculates the width of the
//   element without taking gutters into consideration. The result does not align with the block-based grid.
//
// @example - LESS Usage
//   .element {
//     .span-columns(6);
//
//    .nested-element {
//      .span-columns(2, 6);
//    }
//  }
//
// @example - CSS Output
//   .element {
//     display: block;
//     float: left;
//     margin-right: 2.3576516%;
//     width: 48.8211742%;
//   }
//
//   .element:last-child {
//     margin-right: 0;
//   }
//
//   .element .nested-element {
//     display: block;
//     float: left;
//     margin-right: 4.82915791%;
//     width: 30.11389472%;
//   }
//
//   .element .nested-element:last-child {
//     margin-right: 0;
//   }

.span-columns(@columns, @container-columns: @neat-grid-columns, @display: @neat-default-display, @direction: @neat-default-direction) {
  .span-columns-apply() when (@display = table) {
    display: table-cell;
    width: percentage(@columns / @container-columns);
  }

  .span-columns-apply() when (@display = block-collapse) {
    .flex-width(@columns, @container-columns);
    .flex-gutter(@container-columns);

    display: block;
    float: @opposite-direction;
    width: @column-width + @column-gutter;

    &:last-child {
      width: @column-width;
    }
  }

  .span-columns-apply() when not (@display = table) and not (@display = block-collapse) {
    .flex-width(@columns, @container-columns);
    .flex-gutter(@container-columns);

    display: block;
    float: @opposite-direction;
    margin-@{direction}: @column-gutter;
    width: @column-width;

    &:last-child {
      margin-@{direction}: 0;
    }
  }

  .get-direction(@direction);

  .span-columns-apply();
}